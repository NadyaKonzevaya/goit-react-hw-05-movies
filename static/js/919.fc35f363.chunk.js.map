{"version":3,"file":"static/js/919.fc35f363.chunk.js","mappings":"oOA6CA,EAxCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAOA,GANAC,QAAQC,IAAIN,IAEZO,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,kBAAsBR,GAASS,KAAKL,EACrC,GAAE,CAACJ,IAECG,EAIL,OACE,wBACGA,EAAQO,OAAS,EAChBP,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADC,KAOZ,qEAIP,C,kCC/BKG,EAAW,4BACXC,EAAU,mCAyEVR,EAAM,CACVS,oBAvE0B,WAC1B,OAAOC,EAAAA,GAAAA,IAAA,UACGH,EADH,yCAC4CC,IAChDP,MAAK,SAAAU,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,EAASC,QAE3B,OAAOD,EAASG,IACjB,IACAb,MAAK,SAAAa,GACJ,OAAOA,EAAKC,OACb,GACJ,EA4DCC,eA1DqB,SAAAC,GACrB,OAAOP,EAAAA,GAAAA,IAAA,UACGH,EADH,mCACsCC,EADtC,kBACuDS,IAC3DhB,MAAK,SAAAU,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,EAASC,QAE3B,OAAOD,EAASG,IACjB,IACAb,MAAK,SAAAa,GACJ,OAAOA,EAAKC,OACb,GACJ,EA+CCG,eA7CqB,SAAA1B,GACrB,OAAOkB,EAAAA,GAAAA,IAAA,UACGH,EADH,oBACuBf,EADvB,oBAC0CgB,IAC9CP,MAAK,SAAAU,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,EAASC,QAE3B,OAAOD,EAASG,IACjB,IACAb,MAAK,SAAAa,GACJ,OAAOA,CACR,GACJ,EAkCCK,kBAhCwB,SAAA3B,GACxB,OAAOkB,EAAAA,GAAAA,IAAA,UACGH,EADH,oBACuBf,EADvB,4BACkDgB,IACtDP,MAAK,SAAAU,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,EAASC,QAE3B,OAAOD,EAASG,IACjB,IACAb,MAAK,SAAAa,GACJ,OAAOA,EAAKC,OACb,GACJ,EAqBCK,eAnBqB,SAAA5B,GACrB,OAAOkB,EAAAA,GAAAA,IAAA,UACGH,EADH,oBACuBf,EADvB,4BACkDgB,IACtDP,MAAK,SAAAU,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,EAASC,QAE3B,OAAOD,EAASG,IACjB,IACAb,MAAK,SAAAa,GACJ,OAAOA,EAAKO,IACb,GACJ,GAUD,K","sources":["components/Reviews/Reviews.js","services/api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport API from 'services/api';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  console.log(movieId);\n\n  useEffect(() => {\n    API.fetchMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <ul>\n      {reviews.length > 0 ? (\n        reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <b> Author: {author}</b>\n            <p>{content}</p>\n          </li>\n        ))\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </ul>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.string,\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst BASE_URL = 'http://api.themoviedb.org';\nconst API_KEY = '35b67d916044ed61f84d01dde3676d84';\n// const axios = require('axios').default;\n\nconst fetchTrendingMovies = () => {\n  return axios\n    .get(`${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(response.status);\n      }\n      return response.data;\n    })\n    .then(data => {\n      return data.results;\n    });\n};\n\nconst fetchAllMovies = queryTitle => {\n  return axios\n    .get(`${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${queryTitle}`)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(response.status);\n      }\n      return response.data;\n    })\n    .then(data => {\n      return data.results;\n    });\n};\n\nconst fetchMovieInfo = movieId => {\n  return axios\n    .get(`${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(response.status);\n      }\n      return response.data;\n    })\n    .then(data => {\n      return data;\n    });\n};\n\nconst fetchMovieReviews = movieId => {\n  return axios\n    .get(`${BASE_URL}/3/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(response.status);\n      }\n      return response.data;\n    })\n    .then(data => {\n      return data.results;\n    });\n};\n\nconst fetchMovieCast = movieId => {\n  return axios\n    .get(`${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(response.status);\n      }\n      return response.data;\n    })\n    .then(data => {\n      return data.cast;\n    });\n};\n\nconst API = {\n  fetchTrendingMovies,\n  fetchAllMovies,\n  fetchMovieInfo,\n  fetchMovieReviews,\n  fetchMovieCast,\n};\n\nexport default API;\n\n// function fetchPokemon(name) {\n//   return fetch(`https://pokeapi.co/api/v2/pokemon/${name}`).then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     }\n\n//     return Promise.reject(new Error(`Нет покемона с именем ${name}`));\n//   });\n// }\n\n// const api = {\n//   fetchPokemon,\n// };\n\n// export default api;\n"],"names":["movieId","useParams","useState","reviews","setReviews","console","log","useEffect","API","then","length","map","id","author","content","BASE_URL","API_KEY","fetchTrendingMovies","axios","response","status","Error","data","results","fetchAllMovies","queryTitle","fetchMovieInfo","fetchMovieReviews","fetchMovieCast","cast"],"sourceRoot":""}